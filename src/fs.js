// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Js_null_undefined = require("bs-platform/lib/js/js_null_undefined.js");
var Buffer$LidcoreBsNode = require("./buffer.js");

function int_of_flag(param) {
  if (param !== -131261590) {
    if (param >= 952604760) {
      return fs.constants.COPYFILE_FICLONE_FORCE;
    } else {
      return fs.constants.COPYFILE_FICLONE;
    }
  } else {
    return fs.constants.COPYFILE_EXCL;
  }
}

function copyFileSync($staropt$star, src, dst) {
  var flags = $staropt$star !== undefined ? $staropt$star : /* [] */0;
  var flag = List.fold_left((function (x, y) {
          return x | int_of_flag(y);
        }), 0, flags);
  Fs.copyFileSync(src, dst, flag);
  return /* () */0;
}

function read(position, $staropt$star, length, fd, buffer, cb) {
  var offset = $staropt$star !== undefined ? $staropt$star : 0;
  var position$1 = Js_null_undefined.fromOption(position);
  var length$1 = length !== undefined ? length : Buffer$LidcoreBsNode.length(buffer) - offset;
  Fs.read(fd, buffer, offset, length$1, position$1, (function (err, read, buffer) {
          return cb(err, /* tuple */[
                      read,
                      buffer
                    ]);
        }));
  return /* () */0;
}

function write(position, $staropt$star, length, fd, buffer, cb) {
  var offset = $staropt$star !== undefined ? $staropt$star : 0;
  var position$1 = Js_null_undefined.fromOption(position);
  var length$1 = length !== undefined ? length : Buffer$LidcoreBsNode.length(buffer) - offset;
  Fs.write(fd, buffer, offset, length$1, position$1, (function (err, written, str) {
          return cb(err, /* tuple */[
                      written,
                      str
                    ]);
        }));
  return /* () */0;
}

function createStream(fn, path, fd, autoClose, _) {
  var tmp = { };
  if (fd !== undefined) {
    tmp.fd = Js_primitive.valFromOption(fd);
  }
  if (autoClose !== undefined) {
    tmp.autoClose = Js_primitive.valFromOption(autoClose);
  }
  var params = tmp;
  var $$default = function (param) {
    if (param !== undefined) {
      return Js_primitive.valFromOption(param);
    } else {
      return null;
    }
  };
  var path$1 = $$default(path);
  return Curry._2(fn, path$1, params);
}

function createReadStream(param, param$1, param$2, param$3) {
  return createStream((function (prim, prim$1) {
                return Fs.createReadStream(prim, prim$1);
              }), param, param$1, param$2, param$3);
}

function createWriteStream(param, param$1, param$2, param$3) {
  return createStream((function (prim, prim$1) {
                return Fs.createWriteStream(prim, prim$1);
              }), param, param$1, param$2, param$3);
}

function readFile(path) {
  var partial_arg = {
    flag: "r"
  };
  return (function (param) {
      Fs.readFile(path, partial_arg, param);
      return /* () */0;
    });
}

function readFileSync(path) {
  return Fs.readFileSync(path, {
              flag: "r"
            });
}

function existsSync(prim) {
  return Fs.existsSync(prim);
}

function openFile(prim, prim$1, prim$2) {
  Fs.open(prim, prim$1, prim$2);
  return /* () */0;
}

function close(prim, prim$1) {
  Fs.close(prim, prim$1);
  return /* () */0;
}

function unlinkSync(prim) {
  Fs.unlinkSync(prim);
  return /* () */0;
}

function realpathSync(prim) {
  return Fs.realpathSync(prim);
}

function writeFile(prim, prim$1, prim$2) {
  Fs.writeFile(prim, prim$1, prim$2);
  return /* () */0;
}

function writeFileSync(prim, prim$1) {
  Fs.writeFileSync(prim, prim$1);
  return /* () */0;
}

function rmdirSync(prim) {
  Fs.rmdirSync(prim);
  return /* () */0;
}

function statSync(prim) {
  return Fs.statSync(prim);
}

function isDirectory(prim) {
  return prim.isDirectory();
}

exports.copyFileSync = copyFileSync;
exports.createWriteStream = createWriteStream;
exports.createReadStream = createReadStream;
exports.existsSync = existsSync;
exports.openFile = openFile;
exports.close = close;
exports.unlinkSync = unlinkSync;
exports.read = read;
exports.readFile = readFile;
exports.readFileSync = readFileSync;
exports.realpathSync = realpathSync;
exports.write = write;
exports.writeFile = writeFile;
exports.writeFileSync = writeFileSync;
exports.rmdirSync = rmdirSync;
exports.statSync = statSync;
exports.isDirectory = isDirectory;
/* fs Not a pure module */
