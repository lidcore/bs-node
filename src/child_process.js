// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Child_process = require("child_process");
var Buffer$LidcoreBsNode = require("./buffer.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function stdioConfig(param) {
  if (typeof param === "number") {
    if (param >= 892411982) {
      return "pipe";
    } else {
      return "ignore";
    }
  } else {
    return param[1];
  }
}

function stdioConfig$1(param) {
  return /* array */[
          stdioConfig(param[/* stdin */0]),
          stdioConfig(param[/* stdout */1]),
          stdioConfig(param[/* stderr */2])
        ];
}

function exec(cmd, cb) {
  Child_process.exec(cmd, (function (err, stdout, stderr) {
          return cb(err, /* tuple */[
                      stdout,
                      stderr
                    ]);
        }));
  return /* () */0;
}

function execSync(cmd) {
  return Buffer$LidcoreBsNode.toString(/* None */0, /* None */0, /* None */0, Child_process.execSync(cmd));
}

function execFile(cwd, env, encoding, timeout, maxBuffer, killSignal, uid, gid, windowsHide, windowsVerbatimOptions, shell, cmd, args, cb) {
  var tmp = { };
  if (cwd) {
    tmp.cwd = cwd[0];
  }
  if (env) {
    tmp.env = env[0];
  }
  if (encoding) {
    tmp.encoding = encoding[0];
  }
  if (timeout) {
    tmp.timeout = timeout[0];
  }
  if (maxBuffer) {
    tmp.maxBuffer = maxBuffer[0];
  }
  if (killSignal) {
    tmp.killSignal = killSignal[0];
  }
  if (uid) {
    tmp.uid = uid[0];
  }
  if (gid) {
    tmp.gid = gid[0];
  }
  if (windowsHide) {
    tmp.windowsHide = windowsHide[0];
  }
  if (windowsVerbatimOptions) {
    tmp.windowsVerbatimOptions = windowsVerbatimOptions[0];
  }
  if (shell) {
    tmp.shell = shell[0];
  }
  var options = tmp;
  Child_process.execFile(cmd, args, options, (function (err, stdout, stderr) {
          return cb(err, /* tuple */[
                      stdout,
                      stderr
                    ]);
        }));
  return /* () */0;
}

function spawn(cwd, env, stdio, shell, cmd) {
  var stdio$1 = stdio ? /* Some */[stdioConfig$1(stdio[0])] : /* None */0;
  var tmp = { };
  if (cwd) {
    tmp.cwd = cwd[0];
  }
  if (env) {
    tmp.env = env[0];
  }
  if (stdio$1) {
    tmp.stdio = stdio$1[0];
  }
  if (shell) {
    tmp.shell = shell[0];
  }
  var options = tmp;
  return Child_process.spawn(cmd, options);
}

function on(p, $$event) {
  if ($$event[0] >= 771171134) {
    var fn = $$event[1];
    p.on("exit", (function (code, signal) {
            if (code == null) {
              if (signal == null) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      [
                        "child_process.ml",
                        108,
                        19
                      ]
                    ];
              } else {
                return Curry._1(fn, /* `Signal */[
                            -384130424,
                            signal
                          ]);
              }
            } else if (signal == null) {
              return Curry._1(fn, /* `Code */[
                          748543309,
                          code
                        ]);
            } else {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    [
                      "child_process.ml",
                      108,
                      19
                    ]
                  ];
            }
          }));
    return /* () */0;
  } else {
    var fn$1 = $$event[1];
    p.on("error", Curry.__1(fn$1));
    return /* () */0;
  }
}

function stdin$1(prim) {
  return stdin(prim);
}

function stdout$1(prim) {
  return stdout(prim);
}

function stderr$1(prim) {
  return stderr(prim);
}

exports.exec = exec;
exports.execSync = execSync;
exports.execFile = execFile;
exports.spawn = spawn;
exports.on = on;
exports.stdin = stdin$1;
exports.stdout = stdout$1;
exports.stderr = stderr$1;
/* child_process Not a pure module */
