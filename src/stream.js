// Generated by BUCKLESCRIPT VERSION 4.0.17, PLEASE EDIT WITH CARE
'use strict';

var BsAsyncMonad = require("bs-async-monad/src/bsAsyncMonad.js");
var Buffer$LidcoreBsNode = require("./buffer.js");

function on(str, param) {
  var variant = param[0];
  if (variant >= 106380200) {
    if (variant !== 482438951) {
      if (variant >= 892411982) {
        if (variant >= 991147123) {
          str.on("finish", param[1]);
          return /* () */0;
        } else {
          str.on("pipe", param[1]);
          return /* () */0;
        }
      } else if (variant >= 758940234) {
        str.on("data", param[1]);
        return /* () */0;
      } else {
        str.on("error", param[1]);
        return /* () */0;
      }
    } else {
      str.on("unpipe", param[1]);
      return /* () */0;
    }
  } else if (variant >= -219956328) {
    if (variant >= 3455931) {
      str.on("end", param[1]);
      return /* () */0;
    } else {
      str.on("drain", param[1]);
      return /* () */0;
    }
  } else if (variant >= -611285096) {
    str.on("close", param[1]);
    return /* () */0;
  } else {
    str.on("readable", param[1]);
    return /* () */0;
  }
}

function read(str, cb) {
  var chunks = /* array */[];
  var errored = /* record */[/* contents */false];
  on(str, /* `Error */[
        106380200,
        (function (exn) {
            if (errored[0]) {
              return 0;
            } else {
              errored[0] = true;
              return BsAsyncMonad.Callback[/* fail */1](exn, cb);
            }
          })
      ]);
  on(str, /* `Data */[
        758940234,
        (function (data) {
            if (errored[0]) {
              return 0;
            } else {
              chunks.push(data);
              return /* () */0;
            }
          })
      ]);
  return on(str, /* `End */[
              3455931,
              (function (param) {
                  if (errored[0]) {
                    return 0;
                  } else {
                    var data = Buffer$LidcoreBsNode.toString(undefined, undefined, undefined, Buffer$LidcoreBsNode.concat(chunks));
                    return BsAsyncMonad.Callback[/* return */0](data, cb);
                  }
                })
            ]);
}

function pipe(prim, prim$1) {
  prim.pipe(prim$1);
  return /* () */0;
}

exports.pipe = pipe;
exports.on = on;
exports.read = read;
/* Buffer-LidcoreBsNode Not a pure module */
